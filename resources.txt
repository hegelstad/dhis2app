Modules we are using:

React Treebeard:            https://github.com/alexcurtis/react-treebeard
React Table:                https://github.com/tannerlinsley/react-table
React Bootstrap Toggle:     https://github.com/arnthor3/react-bootstrap-toggle
React-bootstrap (multiple): https://react-bootstrap.github.io
Fusejs                      https://fusejs.io


Useful api calls:

List all orgunits, with two levels of children:
old: https://play.dhis2.org/dev/api/24/organisationUnits/ImspTQPwCqd.json?fields=id,displayName,children[id,displayName,children[id,displayName,children[id,displayName]]]
new: https://play.dhis2.org/dev/api/24/organisationUnits/ImspTQPwCqd.json?fields=id,displayName~rename(name),children[id,displayName~rename(name),children[id,displayName~rename(name),children[id,displayName~rename(name)]]]

Difference: solved the tree problem more efficiently. Back end supported renaming of fields.



DHIS WEB API CALLS:

https://play.dhis2.org/demo/api/25/trackedEntityInstances.json?ou=DiszpKrYNg8&program=rvPTrOfjqrS
https://play.dhis2.org/demo/api/25/organisationUnits/DiszpKrYNg8.json
https://play.dhis2.org/demo/api/25/programs/rvPTrOfjqrS.json
https://play.dhis2.org/demo/api/25/programTrackedEntityAttributes/rgyxcA4Qx33.json
https://play.dhis2.org/demo/api/25/events.json?orgUnit=DiszpKrYNg8&fields=event,enrollment,trackedEntityInstance

https://play.dhis2.org/dev/api/25/events.json?orgUnit=DiszpKrYNg8
https://play.dhis2.org/dev/api/25/trackedEntityInstances/XnFPsDOVJND.json
https://play.dhis2.org/dev/api/25/events/eaeUraEvJVH.json
https://play.dhis2.org/dev/api/25/events/FBUKBDBj6NS.json
https://play.dhis2.org/dev/api/25/events/V1CerIi3sdL.json

Relative values:
 - orgunit (logged in users orgunits)
 - periods (last five day)

For singleton events:

 - Check values and serial numbers if they are the same.
 - Limit scope of this mode to clinics.
 - filter by Period

Components we've moved or removed, keeping some of the source code in the case we need to
use them later on for some reason:

// Columns, TEI COMPONENT. Custom toggle. Incase we need it

render: props =>
        <span>
            {`${props.value} ${this.state.data[props.index].checked} `}
            <input
                type="checkbox"
                checked={this.state.data[props.index].checked}
                onChange={() => { // Binds function to this
                    let element = this.state.data.slice(props.index, props.index+1);
                    element[0].checked = !props.row.checked;
                    this.setState({
                        data: [
                            ...this.state.data.slice(0, props.index),
                            ...element,
                            ...this.state.data.slice(props.index + 1)
                        ]
                    })
                }}
            />
        </span> // Custom cell components!
